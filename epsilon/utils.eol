operation State methodName(): String {
  return 'process' + self.name.ftuc();
}

operation Parameter declaration(): String {
  return self.type + ' ' + self.name;
}

operation Method javaVisibility(): String {
  if (self.visibility = MethodVisibility#PRIVATE) {
    return 'private';
  } else if (self.visibility = MethodVisibility#PROTECTED) {
    return 'protected';
  } else if (self.visibility = MethodVisibility#PUBLIC) {
    return 'public';
  } else {
    return null;
  }
}

operation logicalNot(e: Target!Expression) {
  var ln = new Target!LogicalNot;
  ln.operand = e;
  return ln;
}

operation logicalAnd(l: Target!Expression, r: Target!Expression) {
  var la = new Target!LogicalAnd;
  la.left = l;
  la.right = r;
  return la;
}

operation equals(l: Target!Expression, r: Target!Expression) {
  var eq = new Target!Equals;
  eq.left = l;
  eq.right = r;
  return eq;
}

operation gte(l: Target!Expression, r: Target!Expression) {
  var exp = new Target!GreaterThanOrEquals;
  exp.left = l;
  exp.right = r;
  return exp;
}

operation lte(l: Target!Expression, r: Target!Expression) {
  var exp = new Target!LessThanOrEquals;
  exp.left = l;
  exp.right = r;
  return exp;
}

operation add(l: Target!Expression, r: Target!Expression) {
  var exp = new Target!Add;
  exp.left = l;
  exp.right = r;
  return exp;
}

operation parameterReference(p: Target!Parameter) {
  var pr = new Target!ParameterReference;
  pr.param = p;
  return pr;
}

operation variableReference(vd: Target!VariableDeclaration) {
  var vr = new Target!VariableReference;
  vr.variable = vd;
  return vr;
}

operation methodInvocation(context: Target!Expression, methodName: String, arguments: Sequence) {
  var mi = new Target!MethodInvocation;
  mi.context = context;
  mi.methodByName = methodName;
  mi.arguments = arguments;
  return mi;
}

operation throwStatement(e: Target!Expression) {
  var ts = new Target!ThrowStatement;
  ts.expression = e;
  return ts;
}

operation newInstance(type: String, arguments: Sequence) {
  var ni = new Target!NewInstance;
  ni.type = type;
  ni.arguments = arguments;
  return ni;
}

operation integerConstant(n: Integer) {
  var ic = new Target!IntegerConstant;
  ic.value = n;
  return ic;
}

operation characterConstant(c: String) {
  var cc = new Target!CharacterConstant;
  cc.value = c.charAt(0);
  return cc;
}

operation stringConstant(s: String) {
  var sc = new Target!StringConstant;
  sc.value = s;
  return sc;
}
[% import 'utils.eol'; %]
public class [%= c.name %] {
[% for (m in c.methods) {%]
  [%=m.declaration()%] {
    [% for (b in m.statements) { %]
    [%=b.generate()%]
    [% } %]
  }
[% if (hasMore) { %]

[% } %]
[% } %]
}
[%

@template
operation Method declaration() {%]
[% if (not self.annotations.isEmpty()) {%]
[%=self.annotations.isEmpty() ? '' : self.annotations.collect(a|a.generate()).concat('\n')%]
[% } %]
[%=self.javaVisibility()%] void [%=self.name%]([%=self.parameters.collect(p|p.declaration()).concat(', ')%])
[%
}

@template
operation MethodInvocation generate() {%]
[%=self.context.isDefined() ? self.context.generate() + '.' : ''%][%=self.methodByRef.isDefined() ? self.methodByRef.name : self.methodByName %]([%=self.arguments.collect(a|a.generate()).concat(', ')%])[%=self.eContainingFeature.name = 'statements' ? ';' : ''%][%
}

operation PropertyInvocation generate() {
  return self.context.generate() + '.' + self.propertyName;
}

operation Annotation generate() {
  return '@' + self.type.typeName + (self.arguments.isEmpty() ? '' : '(' + self.arguments.collect(a|a.generate()).concat(', ') + ')');
}

operation AnnotationArgument generate() {
  return self.name + ' = ' + self.expression.generate();
}

@template
operation LambdaExpression generate() {%]
([%= self.parameters.collect(p|p.generate()).concat(', ') %]) -> {[%=self.statements.collect(s|s.generate()).concat(' ')%]}[%
}

operation VariableDeclaration generate() {
  return self.type.typeName + ' ' + self.name + ' = ' + self.initializer.generate() + ';';
} 

operation ParameterReference generate() {
  return self.param.name;
}

operation TypeReference generate() {
  return self.typeName;
}

operation VariableReference generate() {
  return self.variable.name;
}

operation IntegerConstant generate() {
  return self.value.toString();
}

operation CharacterConstant generate() {
  return "'" + self.value.toString() + "'";
}

operation StringConstant generate() {
  return '"' + self.value.replaceAll('"', '\\\\"') + '"';
}

@template
operation IfStatement generate() {%]
if ([%=self.condition.generate()%]) {
  [% for (s in self.statements) {%]
  [%= s.generate() %]
  [% } %]
}
[%
}

operation ReturnStatement generate() {
  return 'return' + (self.expression.isDefined() ? ' ' + self.expression.generate() : '') + ';';
}

operation ThrowStatement generate() {
  return 'throw ' + self.expression.generate() + ';';
}

@template
operation NewInstance generate() {%]
new [%=self.type.typeName%]([%=self.arguments.collect(a|a.generate()).concat(', ')%])[%
}

operation LogicalNot generate() {
  return '!' + self.operand.generate();
}

operation LogicalAnd generate() {
  return self.left.generate() + ' && ' + self.right.generate();
}

operation Equals generate() {
  return self.left.generate() + ' == ' + self.right.generate();
}

operation GreaterThanOrEquals generate() {
  return self.left.generate() + ' >= ' + self.right.generate();
}

operation LessThanOrEquals generate() {
  return self.left.generate() + ' <= ' + self.right.generate();
}

%]
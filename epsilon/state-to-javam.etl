import 'utils.eol';

pre {
  var basePackage = 'uk.ac.york.sample.machine';
}

post {
  /*
   * Turn long type references into imports (does not handle
   * cases where multiple types have the same simple name).
   */
  for (jf in Target!JavaFile.all) {
    var imports : Map;
    var eContents = jf.eAllContents();

    while (eContents.hasNext()) {
      var tr = eContents.next();
      if (tr.isKindOf(Target!TypeReference) and tr.typeName.countDots() > 0) {
        var imp = imports.get(tr.typeName);
        if (imp.isUndefined()) {
          imp = new Target!Import;
          imp.type = typeReference(tr.typeName);
          imports.put(tr.typeName, imp);
        }

        tr.typeName = tr.typeName.split('[.]').last;
      }
    }

    // Sort imports by type
    jf.imports.addAll(imports.values().asSequence().sortBy(imp | imp.type.typeName));
  }
}

rule StateMachine2JavaFile
  transform sm: Source!StateMachine
  to jf: Target!JavaFile
{
  jf.isTest = false;
  jf.basename = sm.name + '.java';
  jf.javaPackage = basePackage;
  jf.classes.add(sm.equivalent('StateMachine2JavaClass'));
}

rule StateMachine2JavaClass
  transform sm: Source!StateMachine
  to jc: Target!JavaClass,
     processMethod: Target!Method,
     tp: Target!Parameter,
     invoke: Target!MethodInvocation
{
  jc.name = sm.name;
  jc.methods.add(processMethod);
  jc.methods.addAll(sm.states.collect(s|s.equivalent()));

  // Adds a 'public process(String text)' method, which calls the initial state
  processMethod.name = 'process';
  processMethod.visibility = Target!Visibility#PUBLIC;
  processMethod.parameters.add(tp);
  tp.name = 'text';

  processMethod.statements.add(invoke);
  invoke.methodByRef = sm.initialState.equivalent().selectOne(e|e.isKindOf(Target!Method));
  invoke.arguments.add(parameterReference(tp));
}

rule StateMachine2JavaTestFile
  transform sm: Source!StateMachine
  to jf: Target!JavaFile
{
  jf.isTest = true;
  jf.basename = sm.name + 'Test.java';
  jf.javaPackage = basePackage;
  jf.classes.add(sm.equivalent('StateMachine2JavaTestClass'));  
}

rule StateMachine2JavaTestClass
  transform sm: Source!StateMachine
  to jc: Target!JavaClass
{
  jc.name = sm.name + 'Test';
  jc.methods.addAll(sm.testCases.collect(e | e.equivalent()));
}

@abstract
rule State2Method
  transform s : Source!State
  to m: Target!Method, tp: Target!Parameter,
     ifNotEmpty: Target!IfStatement
{
  m.name = s.methodName();
  m.visibility = Target!Visibility#PROTECTED;

  m.parameters.add(tp);
  tp.name = 'text';

  m.statements.add(ifNotEmpty);

  // If the text is not empty...
  ifNotEmpty.condition = logicalNot(methodInvocation(parameterReference(tp), 'isEmpty', Sequence {}));

  // Add error if we haven't moved to another state by now
  ifNotEmpty.statements.add(throwStatement(newInstance('IllegalStateException', Sequence {
    methodInvocation(null, 'String.format', Sequence {
      stringConstant('State "' + s.name + '": no valid outgoing transition for "%s"'),
      parameterReference(tp)
    })
  })));
}

rule State2MethodNoTransitions
  transform s : Source!State
  to m: Target!Method, tp: Target!Parameter,
     ifNotEmpty: Target!IfStatement
  extends State2Method
{
  guard: s.outgoing.isEmpty()
}

rule State2MethodWithTransitions
  transform s : Source!State
  to m: Target!Method, tp: Target!Parameter,
     ifNotEmpty: Target!IfStatement,
     cDeclaration: Target!VariableDeclaration,
     restDeclaration: Target!VariableDeclaration
  extends State2Method
{
  guard: not s.outgoing.isEmpty()

  // Fetch the first character
  cDeclaration.type = typeReference('char');
  cDeclaration.name = 'c';
  cDeclaration.initializer = methodInvocation(parameterReference(tp), 'charAt', Sequence { integerConstant(0) });

  // Put the rest of the string in another variable
  restDeclaration.type = typeReference('String');
  restDeclaration.name = 'rest';
  restDeclaration.initializer = methodInvocation(parameterReference(tp), 'substring', Sequence { integerConstant(1) });

  // Add transitions
  var throwStmt = ifNotEmpty.statements.first;
  ifNotEmpty.statements.clear();
  ifNotEmpty.statements.add(cDeclaration);
  ifNotEmpty.statements.add(restDeclaration);
  ifNotEmpty.statements.addAll(s.outgoing.collect(o|o.equivalent()));
  ifNotEmpty.statements.add(throwStmt);
}

@abstract
rule TransitionToStatement
  transform tr: Source!Transition
  to ifStmt: Target!IfStatement, methodInvocation: Target!MethodInvocation, retStmt: Target!ReturnStatement
{
  var cDeclaration = tr.from.equivalents().selectOne(e | e.isKindOf(Target!VariableDeclaration) and e.name = 'c');
  var restDeclaration = tr.from.equivalents().selectOne(e | e.isKindOf(Target!VariableDeclaration) and e.name = 'rest');

  tr.~cDeclaration = cDeclaration;
  tr.~restDeclaration = restDeclaration;

  ifStmt.statements.add(methodInvocation);
  ifStmt.statements.add(retStmt);
  methodInvocation.methodByRef = tr.`to`.equivalent();
  methodInvocation.arguments.add(variableReference(restDeclaration));
}

rule SingleCharacterTransition
  transform tr: Source!Transition
  to ifStmt: Target!IfStatement, methodInvocation: Target!MethodInvocation, retStmt: Target!ReturnStatement
  extends TransitionToStatement
{
  guard: tr.characterRange.matches("\\w")

  ifStmt.condition = equals(variableReference(tr.~cDeclaration), characterConstant(tr.characterRange));
}

rule CharacterRangeTransition
  transform tr: Source!Transition
  to ifStmt: Target!IfStatement, methodInvocation: Target!MethodInvocation, retStmt: Target!ReturnStatement
  extends TransitionToStatement
{
  guard: tr.characterRange.matches("\\w-\\w")

  ifStmt.condition = logicalAnd(
    gte(variableReference(tr.~cDeclaration), characterConstant(tr.characterRange.charAt(0).toString())),
    lte(variableReference(tr.~cDeclaration), characterConstant(tr.characterRange.charAt(2).toString()))
  );
}

@abstract
rule TestCase2Method
  transform tc: Source!TestCase
  to testMethod: Target!Method
{
  var methodToTest = tc.eContainer.equivalents('StateMachine2JavaClass').selectOne(e | e.isKindOf(Target!Method));
  var invocation = new Target!MethodInvocation;
  invocation.context = newInstance(tc.eContainer.equivalent('StateMachine2JavaClass').name, Sequence {});
  invocation.methodByRef = methodToTest;
  invocation.arguments.add(stringConstant(tc.text));

  testMethod.statements.add(invocation);
}

rule Accept2Method
  transform tc: Source!Accepts
  to testMethod: Target!Method
  extends TestCase2Method
{
  testMethod.setTestMethod('accepts' + tc.text.ftuc(), Sequence {});
}

rule Rejects2Method
  transform tc: Source!Rejects
  to testMethod: Target!Method
  extends TestCase2Method
{
  testMethod.setTestMethod('rejects' + tc.text.ftuc(), Sequence {});

  // Wrap the generated invocation in an assertThrows call
  var invocation = testMethod.statements.first;
  testMethod.statements.clear();
  testMethod.statements.add(methodInvocation(
    typeReference('org.junit.jupiter.api.Assertions'),
    'assertThrows',
    Sequence {
      propertyInvocation(typeReference('IllegalStateException'), 'class'),
      lambdaExpression(Sequence { invocation })
    }
  ));
}

operation Target!Method setTestMethod(name: String, annotationArguments: Sequence) {
  self.name = name;
  self.visibility = Target!Visibility#PUBLIC;
  self.annotations.add(annotation('org.junit.jupiter.api.Test', annotationArguments));
}

operation String countDots() {
  return self.length() - self.replace('[.]', '').length();
}